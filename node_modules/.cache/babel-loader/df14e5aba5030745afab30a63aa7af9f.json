{"ast":null,"code":"var _jsxFileName = \"/Users/srba/OneDrive/PROJECTS/gastfreund/kanban-board/src/components/Column/Column.tsx\";\nimport React, { useState, Fragment } from 'react';\nimport { useDispatch } from 'react-redux';\nimport Ticket from '../Ticket';\nimport { Container, Separator, Header, AddTicketButton, Title, TicketCount, Body } from './styles';\nimport { createTicket, deleteTicket } from '../../store/actions';\n\nfunction Column({\n  columnId,\n  title,\n  tickets,\n  setSearchTerm\n}) {\n  const dispatch = useDispatch();\n  const [isDraggedOver, setIsDraggedOver] = useState(false);\n\n  const handleCreateTicket = () => {\n    setSearchTerm('');\n    dispatch(createTicket(columnId));\n  };\n\n  const onDragOver = event => {\n    event.preventDefault();\n    event.stopPropagation();\n    setIsDraggedOver(true);\n  };\n\n  const onDragLeave = event => {\n    event.preventDefault();\n    event.stopPropagation();\n    setIsDraggedOver(false);\n  };\n\n  const onDrop = event => {\n    event.preventDefault();\n    event.stopPropagation();\n    const dragData = event.dataTransfer.getData('text/plain');\n    const {\n      originColumnId,\n      ticketId,\n      text\n    } = JSON.parse(dragData);\n\n    if (originColumnId !== columnId) {\n      dispatch(deleteTicket(ticketId));\n      dispatch(createTicket(columnId, text));\n    }\n\n    setIsDraggedOver(false);\n  };\n\n  return React.createElement(Container, {\n    onDragOver: onDragOver,\n    onDragLeave: onDragLeave,\n    onDrop: onDrop,\n    \"data-testid\": \"column\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(Header, {\n    columnId: columnId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(AddTicketButton, {\n    type: \"button\",\n    \"aria-label\": \"Add new ticket\",\n    onClick: handleCreateTicket,\n    \"data-testid\": \"add-ticket-button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"+\"), React.createElement(Title, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, title), React.createElement(TicketCount, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"(\", tickets.length, \")\")), React.createElement(Body, {\n    columnId: columnId,\n    isDraggedOver: isDraggedOver,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, tickets.map(({\n    id,\n    text\n  }) => React.createElement(Fragment, {\n    key: id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(Ticket, {\n    columnId: columnId,\n    ticketId: id,\n    text: text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }), React.createElement(Separator, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  })))));\n}\n\nexport default Column;","map":{"version":3,"sources":["/Users/srba/OneDrive/PROJECTS/gastfreund/kanban-board/src/components/Column/Column.tsx"],"names":["React","useState","Fragment","useDispatch","Ticket","Container","Separator","Header","AddTicketButton","Title","TicketCount","Body","createTicket","deleteTicket","Column","columnId","title","tickets","setSearchTerm","dispatch","isDraggedOver","setIsDraggedOver","handleCreateTicket","onDragOver","event","preventDefault","stopPropagation","onDragLeave","onDrop","dragData","dataTransfer","getData","originColumnId","ticketId","text","JSON","parse","length","map","id"],"mappings":"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","sourcesContent":["import React, { useState, DragEvent, Fragment } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport Ticket from '../Ticket';\nimport { TicketModel } from '../../models';\nimport {\n  Container,\n  Separator,\n  Header,\n  AddTicketButton,\n  Title,\n  TicketCount,\n  Body\n} from './styles';\n\nimport { createTicket, deleteTicket } from '../../store/actions';\n\ntype Props = {\n  columnId: string;\n  title: string;\n  tickets: TicketModel[];\n  setSearchTerm: (value: string) => void;\n};\n\nfunction Column({ columnId, title, tickets, setSearchTerm }: Props) {\n  const dispatch = useDispatch();\n  const [isDraggedOver, setIsDraggedOver] = useState<boolean>(false);\n\n  const handleCreateTicket = (): void => {\n    setSearchTerm('');\n    dispatch(createTicket(columnId));\n  };\n\n  const onDragOver = (event: DragEvent): void => {\n    event.preventDefault();\n    event.stopPropagation();\n    setIsDraggedOver(true);\n  };\n\n  const onDragLeave = (event: DragEvent): void => {\n    event.preventDefault();\n    event.stopPropagation();\n    setIsDraggedOver(false);\n  };\n\n  const onDrop = (event: any) => {\n    event.preventDefault();\n    event.stopPropagation();\n\n    const dragData = event.dataTransfer.getData('text/plain');\n\n    const { originColumnId, ticketId, text } = JSON.parse(dragData);\n\n    if (originColumnId !== columnId) {\n      dispatch(deleteTicket(ticketId));\n      dispatch(createTicket(columnId, text));\n    }\n\n    setIsDraggedOver(false);\n  };\n\n  return (\n    <Container\n      onDragOver={onDragOver}\n      onDragLeave={onDragLeave}\n      onDrop={onDrop}\n      data-testid=\"column\"\n    >\n      <Header columnId={columnId}>\n        <AddTicketButton\n          type=\"button\"\n          aria-label=\"Add new ticket\"\n          onClick={handleCreateTicket}\n          data-testid=\"add-ticket-button\"\n        >\n          +\n        </AddTicketButton>\n        <Title>{title}</Title>\n        <TicketCount>({tickets.length})</TicketCount>\n      </Header>\n      <Body columnId={columnId} isDraggedOver={isDraggedOver}>\n        {tickets.map(({ id, text }: TicketModel) => (\n          <Fragment key={id}>\n            <Ticket columnId={columnId} ticketId={id} text={text} />\n            <Separator />\n          </Fragment>\n        ))}\n      </Body>\n    </Container>\n  );\n}\n\nexport default Column;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/srba/OneDrive/PROJECTS/gastfreund/kanban-board/src/components/Ticket/Ticket.tsx\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport useClickAway from '../../hooks/useClickAway';\nimport { deleteTicket, updateTicket } from '../../store/actions';\nimport UpdateTicket from '../UpdateTicket';\nimport Draggable from '../Draggable';\nimport { Container, DeleteTicketButton, Text } from './styles';\n\nfunction Ticket({\n  columnId,\n  ticketId,\n  text\n}) {\n  const ticketRef = useRef(null);\n  const dispatch = useDispatch();\n  const [isEditable, setIsEditable] = useState(text ? false : true);\n  const [isEmpty, setIsEmpty] = useState(false);\n  const [textValue, setTextValue] = useState(text);\n\n  const handleDeleteTicket = () => {\n    dispatch(deleteTicket(ticketId));\n  };\n\n  const handleDoubleClick = () => {\n    setIsEditable(true);\n  };\n\n  useClickAway(ticketRef, () => {\n    if (textValue.length) {\n      dispatch(updateTicket(columnId, ticketId, textValue));\n      setIsEditable(false);\n    } else {\n      dispatch(updateTicket(columnId, ticketId, '[Empty ticket]'));\n      setIsEditable(false);\n    }\n  }, !isEditable);\n  const dragData = JSON.stringify({\n    originColumnId: columnId,\n    ticketId,\n    text\n  });\n  useEffect(() => {\n    setIsEmpty(false);\n\n    if (text === '[Empty ticket]') {\n      setIsEmpty(true);\n    }\n  }, [text]);\n  return React.createElement(Draggable, {\n    dragData: dragData,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(Container, {\n    columnId: columnId,\n    onDoubleClick: handleDoubleClick,\n    ref: ticketRef,\n    \"data-testid\": \"ticket\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(DeleteTicketButton, {\n    type: \"button\",\n    \"aria-label\": \"Delete a ticket\",\n    onClick: handleDeleteTicket,\n    \"data-testid\": \"delete-ticket-button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, \"\\u2715\")), isEditable ? React.createElement(UpdateTicket, {\n    columnId: columnId,\n    ticketId: ticketId,\n    textValue: textValue,\n    setTextValue: setTextValue,\n    setIsEditable: setIsEditable,\n    isEmpty: isEmpty,\n    setIsEmpty: setIsEmpty,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }) : React.createElement(Text, {\n    isEmpty: isEmpty,\n    columnId: columnId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, text)));\n}\n\nexport default Ticket;","map":{"version":3,"sources":["/Users/srba/OneDrive/PROJECTS/gastfreund/kanban-board/src/components/Ticket/Ticket.tsx"],"names":["React","useState","useEffect","useRef","useDispatch","useClickAway","deleteTicket","updateTicket","UpdateTicket","Draggable","Container","DeleteTicketButton","Text","Ticket","columnId","ticketId","text","ticketRef","dispatch","isEditable","setIsEditable","isEmpty","setIsEmpty","textValue","setTextValue","handleDeleteTicket","handleDoubleClick","length","dragData","JSON","stringify","originColumnId"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport useClickAway from '../../hooks/useClickAway';\nimport { deleteTicket, updateTicket } from '../../store/actions';\n\nimport UpdateTicket from '../UpdateTicket';\nimport Draggable from '../Draggable';\n\nimport { Container, DeleteTicketButton, Text } from './styles';\n\ntype Props = {\n  columnId: string;\n  ticketId: string;\n  text: string;\n};\n\nfunction Ticket({ columnId, ticketId, text }: Props) {\n  const ticketRef = useRef<any>(null);\n  const dispatch = useDispatch();\n  const [isEditable, setIsEditable] = useState<boolean>(text ? false : true);\n  const [isEmpty, setIsEmpty] = useState<boolean>(false);\n  const [textValue, setTextValue] = useState<string>(text);\n\n  const handleDeleteTicket = (): void => {\n    dispatch(deleteTicket(ticketId));\n  };\n\n  const handleDoubleClick = (): void => {\n    setIsEditable(true);\n  };\n\n  useClickAway(\n    ticketRef,\n    () => {\n      if (textValue.length) {\n        dispatch(updateTicket(columnId, ticketId, textValue));\n        setIsEditable(false);\n      } else {\n        dispatch(updateTicket(columnId, ticketId, '[Empty ticket]'));\n        setIsEditable(false);\n      }\n    },\n    !isEditable\n  );\n\n  const dragData: string = JSON.stringify({\n    originColumnId: columnId,\n    ticketId,\n    text\n  });\n\n  useEffect(() => {\n    setIsEmpty(false);\n    if (text === '[Empty ticket]') {\n      setIsEmpty(true);\n    }\n  }, [text]);\n\n  return (\n    <Draggable dragData={dragData}>\n      <Container\n        columnId={columnId}\n        onDoubleClick={handleDoubleClick}\n        ref={ticketRef}\n        data-testid=\"ticket\"\n      >\n        <DeleteTicketButton\n          type=\"button\"\n          aria-label=\"Delete a ticket\"\n          onClick={handleDeleteTicket}\n          data-testid=\"delete-ticket-button\"\n        >\n          <span>&#x2715;</span>\n        </DeleteTicketButton>\n        {isEditable ? (\n          <UpdateTicket\n            columnId={columnId}\n            ticketId={ticketId}\n            textValue={textValue}\n            setTextValue={setTextValue}\n            setIsEditable={setIsEditable}\n            isEmpty={isEmpty}\n            setIsEmpty={setIsEmpty}\n          />\n        ) : (\n          <Text isEmpty={isEmpty} columnId={columnId}>\n            {text}\n          </Text>\n        )}\n      </Container>\n    </Draggable>\n  );\n}\n\nexport default Ticket;\n"]},"metadata":{},"sourceType":"module"}
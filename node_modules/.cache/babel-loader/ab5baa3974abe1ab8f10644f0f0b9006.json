{"ast":null,"code":"import { uuid } from 'uuidv4';\nimport { CREATE_TICKET, DELETE_TICKET, UPDATE_TICKET } from './types';\nimport { loadState } from './localStorage';\nconst initialState = localStorage.getItem('state') ? loadState() : {\n  toDo: {\n    id: 'toDo',\n    title: 'To Do',\n    tickets: []\n  },\n  inProgress: {\n    id: 'inProgress',\n    title: 'In Progress',\n    tickets: []\n  },\n  done: {\n    id: 'done',\n    title: 'Done',\n    tickets: []\n  }\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case CREATE_TICKET:\n      const {\n        columnId,\n        text\n      } = action.payload;\n      return { ...state,\n        [columnId]: { ...state[columnId],\n          tickets: [{\n            id: uuid(),\n            text\n          }, ...state[columnId].tickets]\n        }\n      };\n\n    case DELETE_TICKET:\n      {\n        const {\n          ticketId\n        } = action.payload;\n        const {\n          id: columnId\n        } = Object.values(state).find(column => column.tickets.find(({\n          id\n        }) => id === ticketId));\n        return { ...state,\n          [columnId]: { ...state[columnId],\n            tickets: state[columnId].tickets.filter(({\n              id\n            }) => id !== ticketId)\n          }\n        };\n      }\n\n    case UPDATE_TICKET:\n      {\n        const {\n          columnId,\n          ticketId,\n          text\n        } = action.payload;\n        return { ...state,\n          [columnId]: { ...state[columnId],\n            tickets: state[columnId].tickets.map(ticket => {\n              if (ticket.id === ticketId) {\n                return { ...ticket,\n                  text\n                };\n              }\n\n              return ticket;\n            })\n          }\n        };\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/srba/OneDrive/PROJECTS/gastfreund/kanban-board/src/store/reducer.ts"],"names":["uuid","CREATE_TICKET","DELETE_TICKET","UPDATE_TICKET","loadState","initialState","localStorage","getItem","toDo","id","title","tickets","inProgress","done","state","action","type","columnId","text","payload","ticketId","Object","values","find","column","filter","map","ticket"],"mappings":"AAAA,SAASA,IAAT,QAAqB,QAArB;AAEA,SAASC,aAAT,EAAwBC,aAAxB,EAAuCC,aAAvC,QAA4D,SAA5D;AAEA,SAASC,SAAT,QAA0B,gBAA1B;AAEA,MAAMC,YAAwB,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,IAC7BH,SAAS,EADoB,GAE7B;AACEI,EAAAA,IAAI,EAAE;AACJC,IAAAA,EAAE,EAAE,MADA;AAEJC,IAAAA,KAAK,EAAE,OAFH;AAGJC,IAAAA,OAAO,EAAE;AAHL,GADR;AAMEC,EAAAA,UAAU,EAAE;AACVH,IAAAA,EAAE,EAAE,YADM;AAEVC,IAAAA,KAAK,EAAE,aAFG;AAGVC,IAAAA,OAAO,EAAE;AAHC,GANd;AAWEE,EAAAA,IAAI,EAAE;AACJJ,IAAAA,EAAE,EAAE,MADA;AAEJC,IAAAA,KAAK,EAAE,MAFH;AAGJC,IAAAA,OAAO,EAAE;AAHL;AAXR,CAFJ;AAoBA,eAAe,UACbG,KAAiB,GAAGT,YADP,EAEbU,MAFa,EAGD;AACZ,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKf,aAAL;AACE,YAAM;AAAEgB,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,UAAqBH,MAAM,CAACI,OAAlC;AACA,aAAO,EACL,GAAGL,KADE;AAEL,SAACG,QAAD,GAAY,EACV,GAAGH,KAAK,CAACG,QAAD,CADE;AAEVN,UAAAA,OAAO,EAAE,CACP;AACEF,YAAAA,EAAE,EAAET,IAAI,EADV;AAEEkB,YAAAA;AAFF,WADO,EAKP,GAAGJ,KAAK,CAACG,QAAD,CAAL,CAAgBN,OALZ;AAFC;AAFP,OAAP;;AAaF,SAAKT,aAAL;AAAoB;AAClB,cAAM;AAAEkB,UAAAA;AAAF,YAAeL,MAAM,CAACI,OAA5B;AACA,cAAM;AAAEV,UAAAA,EAAE,EAAEQ;AAAN,YAAmBI,MAAM,CAACC,MAAP,CAAcR,KAAd,EAAqBS,IAArB,CAA0BC,MAAM,IACvDA,MAAM,CAACb,OAAP,CAAeY,IAAf,CAAoB,CAAC;AAAEd,UAAAA;AAAF,SAAD,KAAyBA,EAAE,KAAKW,QAApD,CADuB,CAAzB;AAIA,eAAO,EACL,GAAGN,KADE;AAEL,WAACG,QAAD,GAAY,EACV,GAAGH,KAAK,CAACG,QAAD,CADE;AAEVN,YAAAA,OAAO,EAAEG,KAAK,CAACG,QAAD,CAAL,CAAgBN,OAAhB,CAAwBc,MAAxB,CACP,CAAC;AAAEhB,cAAAA;AAAF,aAAD,KAAyBA,EAAE,KAAKW,QADzB;AAFC;AAFP,SAAP;AASD;;AACD,SAAKjB,aAAL;AAAoB;AAClB,cAAM;AAAEc,UAAAA,QAAF;AAAYG,UAAAA,QAAZ;AAAsBF,UAAAA;AAAtB,YAA+BH,MAAM,CAACI,OAA5C;AAEA,eAAO,EACL,GAAGL,KADE;AAEL,WAACG,QAAD,GAAY,EACV,GAAGH,KAAK,CAACG,QAAD,CADE;AAEVN,YAAAA,OAAO,EAAEG,KAAK,CAACG,QAAD,CAAL,CAAgBN,OAAhB,CAAwBe,GAAxB,CAA6BC,MAAD,IAAyB;AAC5D,kBAAIA,MAAM,CAAClB,EAAP,KAAcW,QAAlB,EAA4B;AAC1B,uBAAO,EACL,GAAGO,MADE;AAELT,kBAAAA;AAFK,iBAAP;AAID;;AAED,qBAAOS,MAAP;AACD,aATQ;AAFC;AAFP,SAAP;AAgBD;;AACD;AACE,aAAOb,KAAP;AArDJ;AAuDD","sourcesContent":["import { uuid } from 'uuidv4';\n\nimport { CREATE_TICKET, DELETE_TICKET, UPDATE_TICKET } from './types';\nimport { StateModel, TicketModel, ActionModel } from '../models';\nimport { loadState } from './localStorage';\n\nconst initialState: StateModel = localStorage.getItem('state')\n  ? loadState()\n  : {\n      toDo: {\n        id: 'toDo',\n        title: 'To Do',\n        tickets: []\n      },\n      inProgress: {\n        id: 'inProgress',\n        title: 'In Progress',\n        tickets: []\n      },\n      done: {\n        id: 'done',\n        title: 'Done',\n        tickets: []\n      }\n    };\n\nexport default function(\n  state: StateModel = initialState,\n  action: ActionModel\n): StateModel {\n  switch (action.type) {\n    case CREATE_TICKET:\n      const { columnId, text } = action.payload;\n      return {\n        ...state,\n        [columnId]: {\n          ...state[columnId],\n          tickets: [\n            {\n              id: uuid(),\n              text\n            },\n            ...state[columnId].tickets\n          ]\n        }\n      };\n    case DELETE_TICKET: {\n      const { ticketId } = action.payload;\n      const { id: columnId } = Object.values(state).find(column =>\n        column.tickets.find(({ id }: TicketModel) => id === ticketId)\n      );\n\n      return {\n        ...state,\n        [columnId]: {\n          ...state[columnId],\n          tickets: state[columnId].tickets.filter(\n            ({ id }: TicketModel) => id !== ticketId\n          )\n        }\n      };\n    }\n    case UPDATE_TICKET: {\n      const { columnId, ticketId, text } = action.payload;\n\n      return {\n        ...state,\n        [columnId]: {\n          ...state[columnId],\n          tickets: state[columnId].tickets.map((ticket: TicketModel) => {\n            if (ticket.id === ticketId) {\n              return {\n                ...ticket,\n                text\n              };\n            }\n\n            return ticket;\n          })\n        }\n      };\n    }\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
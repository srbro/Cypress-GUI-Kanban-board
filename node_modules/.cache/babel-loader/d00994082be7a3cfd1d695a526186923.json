{"ast":null,"code":"var _jsxFileName = \"/Users/srba/OneDrive/PROJECTS/gastfreund/kanban-board/src/components/UpdateTicket/UpdateTicket.tsx\";\nimport React, { useEffect, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { updateTicket } from '../../store/actions';\nimport { Textarea } from './styles';\n\nfunction UpdateTicket({\n  columnId,\n  ticketId,\n  textValue,\n  setTextValue,\n  setIsEditable,\n  isEmpty,\n  setIsEmpty\n}) {\n  const dispatch = useDispatch();\n  const textareaRef = useRef(null);\n\n  const handleChange = event => {\n    setIsEmpty(false);\n    setTextValue(event.target.value);\n  };\n\n  const handleEnterKey = event => {\n    if (event.keyCode === 13) {\n      event.preventDefault();\n\n      if (textValue.length) {\n        dispatch(updateTicket(columnId, ticketId, textValue));\n        setIsEditable(false);\n      }\n    }\n  };\n\n  useEffect(() => {\n    textareaRef.current.focus();\n    textareaRef.current.selectionStart = textValue.length;\n  }, [textValue.length]);\n  return React.createElement(Textarea, {\n    placeholder: \"Add your text here\",\n    onKeyDown: handleEnterKey,\n    value: isEmpty ? '' : textValue,\n    onChange: handleChange,\n    inputRef: textareaRef,\n    columnid: columnId,\n    \"aria-label\": \"Add your ticket text here\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  });\n}\n\nexport default UpdateTicket;","map":{"version":3,"sources":["/Users/srba/OneDrive/PROJECTS/gastfreund/kanban-board/src/components/UpdateTicket/UpdateTicket.tsx"],"names":["React","useEffect","useRef","useDispatch","updateTicket","Textarea","UpdateTicket","columnId","ticketId","textValue","setTextValue","setIsEditable","isEmpty","setIsEmpty","dispatch","textareaRef","handleChange","event","target","value","handleEnterKey","keyCode","preventDefault","length","current","focus","selectionStart"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAqE,OAArE;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,YAAT,QAA6B,qBAA7B;AAEA,SAASC,QAAT,QAAyB,UAAzB;;AAYA,SAASC,YAAT,CAAsB;AACpBC,EAAAA,QADoB;AAEpBC,EAAAA,QAFoB;AAGpBC,EAAAA,SAHoB;AAIpBC,EAAAA,YAJoB;AAKpBC,EAAAA,aALoB;AAMpBC,EAAAA,OANoB;AAOpBC,EAAAA;AAPoB,CAAtB,EAQU;AACR,QAAMC,QAAQ,GAAGX,WAAW,EAA5B;AACA,QAAMY,WAAW,GAAGb,MAAM,CAAM,IAAN,CAA1B;;AAEA,QAAMc,YAAY,GAAIC,KAAD,IAAmD;AACtEJ,IAAAA,UAAU,CAAC,KAAD,CAAV;AACAH,IAAAA,YAAY,CAACO,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAZ;AACD,GAHD;;AAKA,QAAMC,cAAc,GAAIH,KAAD,IAAqD;AAC1E,QAAIA,KAAK,CAACI,OAAN,KAAkB,EAAtB,EAA0B;AACxBJ,MAAAA,KAAK,CAACK,cAAN;;AAEA,UAAIb,SAAS,CAACc,MAAd,EAAsB;AACpBT,QAAAA,QAAQ,CAACV,YAAY,CAACG,QAAD,EAAWC,QAAX,EAAqBC,SAArB,CAAb,CAAR;AACAE,QAAAA,aAAa,CAAC,KAAD,CAAb;AACD;AACF;AACF,GATD;;AAWAV,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,WAAW,CAACS,OAAZ,CAAoBC,KAApB;AACAV,IAAAA,WAAW,CAACS,OAAZ,CAAoBE,cAApB,GAAqCjB,SAAS,CAACc,MAA/C;AACD,GAHQ,EAGN,CAACd,SAAS,CAACc,MAAX,CAHM,CAAT;AAKA,SACE,oBAAC,QAAD;AACE,IAAA,WAAW,EAAC,oBADd;AAEE,IAAA,SAAS,EAAEH,cAFb;AAGE,IAAA,KAAK,EAAER,OAAO,GAAG,EAAH,GAAQH,SAHxB;AAIE,IAAA,QAAQ,EAAEO,YAJZ;AAKE,IAAA,QAAQ,EAAED,WALZ;AAME,IAAA,QAAQ,EAAER,QANZ;AAOE,kBAAW,2BAPb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAWD;;AAED,eAAeD,YAAf","sourcesContent":["import React, { useEffect, useRef, ChangeEvent, KeyboardEvent } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { updateTicket } from '../../store/actions';\n\nimport { Textarea } from './styles';\n\ntype Props = {\n  columnId: string;\n  ticketId: string;\n  textValue: string;\n  setTextValue: (value: string) => void;\n  setIsEditable: (value: boolean) => void;\n  isEmpty: boolean;\n  setIsEmpty: (isEmpty: boolean) => void;\n};\n\nfunction UpdateTicket({\n  columnId,\n  ticketId,\n  textValue,\n  setTextValue,\n  setIsEditable,\n  isEmpty,\n  setIsEmpty\n}: Props) {\n  const dispatch = useDispatch();\n  const textareaRef = useRef<any>(null);\n\n  const handleChange = (event: ChangeEvent<HTMLTextAreaElement>): void => {\n    setIsEmpty(false);\n    setTextValue(event.target.value);\n  };\n\n  const handleEnterKey = (event: KeyboardEvent<HTMLTextAreaElement>): void => {\n    if (event.keyCode === 13) {\n      event.preventDefault();\n\n      if (textValue.length) {\n        dispatch(updateTicket(columnId, ticketId, textValue));\n        setIsEditable(false);\n      }\n    }\n  };\n\n  useEffect(() => {\n    textareaRef.current.focus();\n    textareaRef.current.selectionStart = textValue.length;\n  }, [textValue.length]);\n\n  return (\n    <Textarea\n      placeholder=\"Add your text here\"\n      onKeyDown={handleEnterKey}\n      value={isEmpty ? '' : textValue}\n      onChange={handleChange}\n      inputRef={textareaRef}\n      columnid={columnId}\n      aria-label=\"Add your ticket text here\"\n    />\n  );\n}\n\nexport default UpdateTicket;\n"]},"metadata":{},"sourceType":"module"}